@model m4d.ViewModels.SongDetails

@using (Html.BeginForm((string)ViewBag.Action, "Song", null, FormMethod.Post, new { @class="form-horizontal"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    m4d.ViewModels.SongDetails old = null;

    try
    {
        old = ViewBag.OldSong;
    }
    catch (Microsoft.CSharp.RuntimeBinder.RuntimeBinderException)
    {

    }

    @Html.HiddenFor(model => model.SongId)

    <div class="form-group">
        @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
            @if (old != null && !string.IsNullOrWhiteSpace(old.Title))
            {
                <div class="editor-alternate">
                    @old.Title
                </div>
            }
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.Artist, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Artist)
            @Html.ValidationMessageFor(model => model.Artist)
            @if (old != null && !string.IsNullOrWhiteSpace(old.Artist))
            {
                <div class="editor-alternate">
                    @old.Artist
                </div>
            }
        </div>
    </div>
    
    <!-- Album stuff goes here-->

    <div class="form-group">
        @Html.LabelFor(model => model.Tempo, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Tempo)
            @Html.ValidationMessageFor(model => model.Tempo)

            @if (old != null && old.Tempo != null)
            {
                <div class="editor-alternate">
                    @old.Tempo.Value
                </div>
            }
            </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Length, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Length)
            @Html.ValidationMessageFor(model => model.Length)

            @if (old != null && old.Length != null)
            {
                <div class="editor-alternate">
                    @old.Length.Value
                </div>
            }
            </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Genre, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Genre)
            @Html.ValidationMessageFor(model => model.Genre)

            @if (old != null && old.Genre != null)
            {
                <div class="editor-alternate">
                    @old.Genre
                </div>
            }
            </div>
    </div>
    
    <hr />
    <div class="display-label">
        Dance(s):
    </div>
    <div class="display-field">
        @{ var separator = ""; }
        @if (Model.DanceRatings != null)
        {
            foreach (var item in Model.DanceRatings)
            {
                @separator;
                @Html.DisplayFor(model => item.Dance.Info.Name)
                if (item.Weight > 1)
                {
                    <b>(@item.Weight)</b>
                }
                separator = ", ";
            }
            <br/>
        }
    </div>

    if (ViewData.ContainsKey("DanceListRemove"))
    { 
        <div class="editor-label">
            Remove Dances from this list to vote them down.
        </div>
        <div class="editor-field">
            @Html.ListBox("remDances", ViewBag.DanceListRemove as MultiSelectList, new { @class = "chzn-select", data_placeholder = "Remove Dances to Vote Down..." })
        </div>
    }
    if (ViewData.ContainsKey("DanceListAdd"))
    { 
    <div class="editor-label">
        Add dances to this list to vote them up.
    </div>
    <div class="editor-field">
        @Html.ListBox("addDances", ViewBag.DanceListAdd as MultiSelectList, new { @class = "chzn-select", data_placeholder = "Choose Dances to Vote Up..." })
    </div>
    <br />
    }

    <hr />
    <table>
        <tr><td class="album-header">Album</td><td class="track-header">Track</td><td class="publisher-header">Label</td><td class="delete-header"></td></tr>
        @{
            int currentAlbum = 0;
            int maxAlbum = 5;
            if (Model.Albums != null)
            {
                maxAlbum = Model.Albums.Count + 5;
                for (; currentAlbum < Model.Albums.Count; currentAlbum++)
                {
                    string albumId = "Album_" + currentAlbum.ToString();
                    string deleteId = "Delete_" + currentAlbum.ToString();
                    //string purchase = Model.Albums[currentAlbum].SerializePurchaseInfo();
                    <tr id="@albumId">
                        <td>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Albums[currentAlbum].Name)
                                @Html.ValidationMessageFor(model => model.Albums[currentAlbum].Name)
                            </div>
                        </td>
                        <td>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Albums[currentAlbum].Track)
                                @Html.ValidationMessageFor(model => model.Albums[currentAlbum].Track)
                            </div>
                        </td>
                        <td>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.Albums[currentAlbum].Publisher)
                                @Html.ValidationMessageFor(model => model.Albums[currentAlbum].Publisher)
                            </div>
                        </td>
                        <td>
                            <button type="button" id="@deleteId">X</button>
                            @Html.HiddenFor(model => Model.Albums[currentAlbum].PurchaseInfo)
                            @Html.HiddenFor(model => Model.Albums[currentAlbum].Index)
                        </td>
                    </tr>
                }
            }
            else
            {
                Model.Albums = new List<m4d.ViewModels.AlbumDetails>();
            }

            int albumIdx = Model.GetNextAlbumIndex();

            for (; currentAlbum < maxAlbum; currentAlbum += 1)
            {
                string albumId = "Album_" + currentAlbum.ToString();
                Model.Albums.Add(new m4d.ViewModels.AlbumDetails { Index = albumIdx++ });
                <tr id="@albumId" hidden>
                    <td>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Albums[currentAlbum].Name)
                            @Html.ValidationMessageFor(model => model.Albums[currentAlbum].Name)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Albums[currentAlbum].Track)
                            @Html.ValidationMessageFor(model => model.Albums[currentAlbum].Track)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Albums[currentAlbum].Publisher)
                            @Html.ValidationMessageFor(model => model.Albums[currentAlbum].Publisher)
                        </div>
                    </td>
                </tr>
            }

            <tr>
                <td colspan="3"><button type="button" id="AddAlbum">New Album</button></td>
            </tr>
        }
    </table>
    
    <hr />
    <div class="display-label">
        @Html.DisplayNameFor(model => model.Created):
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Created)
        @Html.HiddenFor(model => model.Created)
    </div>
    <br />

    <div class="display-label">
        @Html.DisplayNameFor(model => model.Modified):
    </div>
    <div class="display-field">
        @Html.DisplayFor(model => model.Modified)
    </div>
    
    <hr />
            
    <p>
        <input type="submit" value="@ViewBag.Submit" class="btn btn-default" />
    </p>    
}

