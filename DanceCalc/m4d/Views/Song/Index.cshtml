@model PagedList.IPagedList<Song>
@using PagedList.Mvc;

@* ReSharper disable once SuggestVarOrType_SimpleTypes *@
@{
    SongFilter filter = ViewData.ContainsKey("SongFilter") ? ViewBag.SongFilter : SongFilter.Default;
    DanceQuery danceQuery = filter.DanceQuery;
    var description = filter.Description;

    ViewBag.Title = "Songs for Dancing";
    ViewBag.Description = "music4dance catalog: " + description;
    var isAdmin = User.IsInRole("dbAdmin");

    var dances = (IList<SongCounts>)ViewBag.Dances;

}

@using (Html.BeginForm("Search", "Song", FormMethod.Get, new { id = "search" }))
{
    var danceName = "All Dances";
    if (danceQuery.Advanced)
    {
        danceName = "Advanced";
    }
    else if (!danceQuery.All)
    {
        danceName = danceQuery.Dances.First().Name;
    }

    var checkX = string.Empty;
    var checkA = string.Empty;
    var checkI = string.Empty;
    var checkS = string.Empty;
    var purchase = filter.Purchase;
    if (!string.IsNullOrWhiteSpace(purchase))
    {
        if (purchase.Contains('X'))
        {
            checkX = "checked";
        }
        if (purchase.Contains('A'))
        {
            checkA = "checked";
        }
        if (purchase.Contains('I'))
        {
            checkI = "checked";
        }
        if (purchase.Contains('S'))
        {
            checkS = "checked";
        }
    }

    <div class="row">
        <div class="col-xs-12">
            <div class="input-group" style="margin-top:10px">
                <div class="input-group-btn search-panel">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                        <span id="dance_selector">@danceName</span> <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li id="DID_ALL"><a href="#ALL"><strong>All Dances</strong></a></li>
                        <li id="DID_ADVANCED"><a href="#ADVANCED"><strong>Advanced</strong></a></li>
                        @foreach (var sc in dances.OrderBy(x => x.DanceName))
                        {
                            var id = "DID_" + sc.DanceId;
                            var href = "#" + sc.DanceId;
                            <li id="@id"><a href=@href><strong>@sc.DanceName</strong></a></li>
                            foreach (var sci in sc.Children.OrderBy(x => x.DanceName))
                            {
                                if (sci.SongCount > 0)
                                {
                                    id = "DID_" + sci.DanceId;
                                    href = "#" + sci.DanceId;
                                    <li id="@id"><a href=@href><small>&nbsp;@sci.DanceName</small></a></li>
                                }
                            }
                        }
                    </ul>
                </div>
                <input type="hidden" name="dances" id="dances" value="@filter.Dances" />
                <input type="hidden" name="filter" id="filter" value="@filter.ToString()" />
                @Html.TextBox("SearchString", filter.SearchString, new { @class = "form-control search-text", placeholder = "Artist, Title, or Album" })
                <span class="input-group-btn">
                    <button id="submit-search" class="btn btn-default" type="submit"><span class="glyphicon glyphicon-search"></span></button>
                </span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <div id="AdvancedSearch" class="input-group">
                <div class="input-group">
                    Include only songs available on:
                    <label>
                        <input type="checkbox" name="services" id="serviceX" value="X" @checkX />
                        Groove
                    </label>
                    <label>
                        <input type="checkbox" name="services" id="serviceA" value="A" @checkA />
                        Amazon
                    </label>
                    <label>
                        <input type="checkbox" name="services" id="serviceI" value="I" @checkI />
                        ITunes
                    </label>
                    <label>
                        <input type="checkbox" name="services" id="serviceS" value="S" @checkS />
                        Spotify
                    </label>
                </div>

                <div class="input-group">
                    Tempo between @Html.TextBox("TempoMin", filter.TempoMin, new {@class = "input-sm"})&nbsp;and&nbsp;
                    @Html.TextBox("TempoMax", filter.TempoMax, new {@class = "input-sm"}) &nbsp;BPM
                </div>

                <div class="input-group" style="margin-top: 3px">
                    Dance to
                    <div id="dance-boolean" class="btn-group">
                        <button type="button" class="btn btn-sm btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@(danceQuery.IsExclusive?"all":"any") <span class="caret"></span></button>
                        <ul class="dropdown-menu">
                            <li><a id="db-all" href="#">All</a></li>
                            <li><a id="db-any" href="#">Any</a></li>
                        </ul>
                    </div> of:
                    <select id="chosen-dances" class="chosen-select" style="width: 350px;" multiple data-placeholder="Choose some dance styles...">
                        @foreach (var d in dances)
                        {
                            var set = danceQuery.HasDance(d.DanceId) ? "selected" : "";
                            <option value="@d.DanceId" @set>@d.DanceName</option>
                            foreach (var ds in d.Children)
                            {
                                set = danceQuery.HasDance(ds.DanceId) ? "selected" : "";
                                <option value="@ds.DanceId" @set>@ds.DanceName</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
}
<div class="row">
    <div class="col-md-12">
        <a id="ToggleAdvanced" href="#" class="btn btn-info btn-xs btn-block" style="margin-top:5px">&nbsp;</a>
    </div>
</div>

@if (isAdmin)
{
    using (Html.BeginForm("BulkEdit", "Song"))
    {
        @Html.AntiForgeryToken()
        Html.RenderPartial("_ListSongs", @Model, ViewData);
        <div class="row col-xs-12">
            <input type="hidden" name="filter" value="@filter"/>
            <input type="submit" name="action" value="Merge" class="btn btn-"/>
            <input type="submit" name="action" value="Delete" class="btn"/>
            @Html.ActionLink("Add New Song", "Create", null, new {@class = "btn btn-default", role = "button"})
            @Html.ActionLink("Groove Batch", "BatchMusicService", new {filter, type = "X", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("ITunes Batch", "BatchMusicService", new {filter, type = "I", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Spotify Batch", "BatchMusicService", new {filter, type = "S", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Amazon Batch", "BatchMusicService", new {filter, type = "A", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Canonical Batch", "BatchMusicService", new {filter, type = "-", count = 10, options = "M"}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Backup List", "BackupTail", "Admin", new { filter, count=-1}, new { @class = "btn btn-default", role = "button" })
        </div>
    }
}
else
{
    Html.RenderPartial("_ListSongs", @Model, ViewData);
}

<div class="row">
    <div class="col-md-6">
        @Html.PagedListPager(Model, page => Url.Action(filter.Action, new { page, filter }))
    </div>
    <div class="col-md-2 pagination-align">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        (@Model.TotalItemCount songs found.)
    </div>
    <div class="col-md-4 pagination-align">
        @if (!danceQuery.All)
        {
            foreach (var dance in danceQuery.Dances)
            {
                @Html.ActionLink(dance.Name + " Page", dance.Name, "dances", new { filter, type = "I", count = 1 }, new { @class = "btn btn-default", role = "button" })
            }
        }
        @if (!filter.IsEmpty)
        {
            @Html.ActionLink("New Search", "index", "song", new { @class = "btn btn-default", role = "button" })
        }
    </div>
</div>

<div class="row">
    <div id="spotify-player" class="col-md-6" data-trackset-name="music4dance" data-trackset-songs="@string.Join(",", Model.Select(s => s.SongId))"></div>
    <div class="col-md-6"><h4>@description</h4></div>
</div>


@if (!filter.IsEmpty)
{
    <h3>@filter.Description</h3>
}

@section Scripts
{
    @{
        if (filter.Advanced)
        {
            <script>var showAdvanced = true</script>
        }
        else
        {
            <script>var showAdvanced = false</script>
        }
        if (danceQuery.IsExclusive)
        {
            <script>var danceOr = false</script>
        }
        else
        {
            <script>var danceOr = true</script>
        }
        string pageScript = "~/Scripts/songindex.js" + Page.ScriptQualifier;
        string msScript = "~/Scripts/musicservice.js" + Page.ScriptQualifier;
    }
    @Scripts.Render("~/bundles/jqueryval")
    <script src="@Url.Content("~/Scripts/chosen.jquery.js")" type="text/javascript"></script>
    <script src="@Url.Content(msScript)" type="text/javascript"></script>
    <script src="@Url.Content(pageScript)" type="text/javascript"></script>

    <link href="@Url.Content("~/Content/chosen.css")" rel="stylesheet" type="text/css" />
}
