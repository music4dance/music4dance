@model PagedList.IPagedList<Song>
@using PagedList.Mvc;

@Html.Partial("_SetupFilterScript")

@* ReSharper disable once SuggestVarOrType_SimpleTypes *@
@{
    SongFilter filter = ViewData.ContainsKey("SongFilter") ? ViewBag.SongFilter : SongFilter.Default;
    var danceQuery = filter.DanceQuery;
    var description = filter.Description;

    ViewBag.Title = "Songs for Dancing";
    ViewBag.Description = "music4dance catalog: " + description;
    var isAdmin = User.IsInRole("dbAdmin");

    var dances = (IList<SongCounts>)ViewBag.Dances;

    var userName = filter.UserQuery.IsEmpty ? User.Identity.Name : filter.UserQuery.UserName;
}

@helper Spotify()
{
    <div id="spotify-player" class="col-md-6" data-trackset-name="music4dance" data-trackset-songs="@string.Join(",", Model.Select(s => s.SongId))">
        <button class="btn-default btn-block btn-lg">Show Spotify Player</button>
    </div>
}

@Html.Partial("ItemTags")

@if (string.Equals(filter.Action, "advanced", StringComparison.OrdinalIgnoreCase))
{
        // Advanced search header
        <h1>Search Results</h1>
        <div class="row">
            <div class="col-sm-6"><h4>@description</h4></div>
            <div class="col-sm-2 col-sm-offset-2">
                @Html.ActionLink("Change Search","advancedsearchform",new {filter}, new {@class="btn btn-default"})
            </div>
        </div>
        <hr/>
}
else
{
    // Basic search header
    using (Html.BeginForm("Search", "Song", FormMethod.Get, new {id = "search"}))
    {
        var danceName = (danceQuery.All || danceQuery.Advanced)? "All Dances" : danceQuery.Dances.First().Name;

        <div class="row">
            <h1 class="col-sm-2" style="width: auto; font-size: 22px;">Song Library</h1>
            <div class="col-sm-offset-2" style="margin-left: 1px">
                <div class="input-group" style="margin-top: 1em">
                    <div class="input-group-btn search-panel">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="margin-left: 15px">
                            <span id="dance_selector">@danceName</span> <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li id="DID_ALL"><a href="#ALL"><strong>All Dances</strong></a></li>
                            @foreach (var sc in dances.OrderBy(x => x.DanceName))
                            {
                                var id = "DID_" + sc.DanceId;
                                var href = "#" + sc.DanceId;
                                <li id="@id"><a href=@href><strong>@sc.DanceName</strong></a></li>
                                foreach (var sci in sc.Children.OrderBy(x => x.DanceName))
                                {
                                    if (sci.SongCount > 0)
                                    {
                                        id = "DID_" + sci.DanceId;
                                        href = "#" + sci.DanceId;
                                        <li id="@id"><a href=@href><small>&nbsp;@sci.DanceName</small></a></li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                    <input type="hidden" name="dances" id="dances" value="@filter.Dances"/>
                    <input type="hidden" name="filter" id="filter" value="@filter.ToString()"/>
                    <input type="hidden" name="tags" id="tags"/>
                    @Html.TextBox("SearchString", filter.SearchString, new {@class = "form-control search-text", placeholder = "Artist, Title, or Album", id="search-text" })
                    <span class="input-group-btn">
                        <button id="submit-search" class="btn btn-default" type="submit" style="margin-right: 15px"><span class="glyphicon glyphicon-search"></span></button>
                    </span>
                </div>
            </div>
        </div>
        <div class="row">
            <p class="col-xs-6">  @Html.ActionLink("Saved Searches", "index", "searches", new {user=@userName,filter} , new { id = "saved-search" })</p>
            <p class="col-xs-6" style="text-align: right; padding-right:20px">@Html.ActionLink("Advanced Search", "advancedsearchform", "song", new {filter} , new { id = "advanced-search" })</p>
        </div>
    }
}


@if (isAdmin)
{
    using (Html.BeginForm("BulkEdit", "Song"))
    {
        @Html.AntiForgeryToken()
        Html.RenderPartial("_ListSongs", @Model, ViewData);
        <div class="row col-xs-12">
            <input type="hidden" name="filter" value="@filter"/>
            <input type="submit" name="action" value="Merge" class="btn btn-"/>
            <input type="submit" name="action" value="Delete" class="btn"/>
            <input type="submit" name="action" value="CleanupAlbums" class="btn" />
            @Html.ActionLink("Add New Song", "Create", null, new {@class = "btn btn-default", role = "button"})
            @Html.ActionLink("Groove Batch", "BatchMusicService", new {filter, type = "X", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("ITunes Batch", "BatchMusicService", new {filter, type = "I", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Spotify Batch", "BatchMusicService", new {filter, type = "S", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Amazon Batch", "BatchMusicService", new {filter, type = "A", count = 10}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Canonical Batch", "BatchMusicService", new {filter, type = "-", count = 10, options = "M"}, new {@class = "btn btn-success", role = "button"})
            @Html.ActionLink("Clean Services", "BatchCleanService", new { filter, count = 10 }, new { @class = "btn btn-success", role = "button" })
            @Html.ActionLink("Backup List", "BackupTail", "Admin", new {filter, count=-1}, new { @class = "btn btn-default", role = "button" })
            @Html.ActionLink("JSON", "BackupJson", "Admin", new { filter }, new { @class = "btn btn-default", role = "button" })
            @Html.ActionLink("Update User Tags", "RebuildUserTags", "Admin", new {filter, update=true}, new { @class = "btn btn-default", role = "button" })
            @Html.ActionLink("Update Tags", "RebuildTags", "Admin", new {filter}, new { @class = "btn btn-default", role = "button" })
            @Html.ActionLink("Echo Batch", "BatchEchoNest", new { filter, count = 10 }, new { @class = "btn btn-warning", role = "button" })
            @Html.ActionLink("Sample Batch", "BatchSamples", new { filter, count = 10 }, new { @class = "btn btn-warning", role = "button" })
        </div>
    }
}
else
{
    Html.RenderPartial("_ListSongs", @Model, ViewData);
}

<div class="row">
    <div class="col-md-6">
        @Html.PagedListPager(Model, page => Url.Action(filter.Action, new { page, filter }))
    </div>
    <div class="col-md-2 pagination-align">
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        (@Model.TotalItemCount songs found.)
    </div>
    <div class="col-md-4 pagination-align">
        @if (!danceQuery.All)
        {
            foreach (var dance in danceQuery.Dances)
            {
                @Html.ActionLink(dance.Name + " Page", dance.Name, "dances", new { filter, type = "I", count = 1 }, new { @class = "btn btn-default", role = "button" })
            }
        }
        @if (!string.Equals(filter.Action, "advanced", StringComparison.OrdinalIgnoreCase))
        {
            if (!filter.IsEmpty)
            {
            @Html.ActionLink("New Search", "index", "song", new { @class = "btn btn-default", role = "button" })
            }
        }
    </div>
</div>

@if (string.Equals(filter.Action, "advanced", StringComparison.OrdinalIgnoreCase))
    {
    <div class="row">
        @Spotify()
    </div>
}
else
{
    <div class="row">
        @Spotify()
        <div class="col-md-6"><h4>@description</h4></div>
    </div>
}

@section Scripts
{
    @{
        @*if (filter.Advanced)
        {
            <script>var showAdvanced = true</script>
        }
        else
        {
            <script>var showAdvanced = false</script>
        }
        if (danceQuery.IsExclusive)
        {
            <script>var danceOr = false</script>
        }
        else
        {
            <script>var danceOr = true</script>
        }*@
    }
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/knockout-mapping")
    @Scripts.Render("~/bundles/tools-script")
    @Scripts.Render("~/bundles/musicservice")
    @Scripts.Render("~/bundles/tagchooser")
    @Scripts.Render("~/bundles/catalog")

    @Styles.Render("~/bundles/tools-style")
}
