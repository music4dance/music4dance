@model PagedList.IPagedList<m4dModels.Song>
@using PagedList.Mvc;

<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Songs for Dancing";
    bool canEdit = false;
    if (User.IsInRole("canEdit"))
    {
        canEdit = true;
    }
    bool showDiag = false;
    if (User.IsInRole("showDiagnostics"))
    {
        showDiag = true;
    }
}

<h2>@ViewBag.Title</h2>


<div id="BasicSearch">
    @using (Html.BeginForm("Search", "Song", FormMethod.Get, new { @class = "well form-inline" }))
    {
        <div class="form-group">
            Find: @Html.TextBox("SearchString", ViewBag.SongFilter.SearchString as string, new { placeholder = "Artist, Title, or Album text" })&nbsp;
            @if (ViewBag.Dances != null)
            {
                @Html.DropDownList("Dances");
            }
        </div>
        <div class="form-group">
            <input type="hidden" name="filter" value="@ViewBag.SongFilter.ToString()" />
            <input type="submit" value="Search" />
        </div>
    }
    <button id="ShowAdvanced" type="button" class="btn btn-info btn-xs btn-block">Advanced Search>></button>
</div>

<div id="AdvancedSearch" hidden>
    @using (Html.BeginForm("AdvancedSearch", "Song", FormMethod.Get, new { @class = "well form-horizontal" }))
    {
        string checkX = string.Empty;
        string checkA = string.Empty;
        string checkI = string.Empty;
        string purchase = ViewBag.SongFilter.Purchase;
        if (!string.IsNullOrWhiteSpace(purchase))
        {
            if (purchase.Contains('X'))
            {
                checkX = "checked";
            }
            if (purchase.Contains('A'))
            {
                checkA = "checked";
            }
            if (purchase.Contains('I'))
            {
                checkI = "checked";
            }
        }

        <div class="form-group">
            Find: @Html.TextBox("SearchString", ViewBag.SongFilter.SearchString as string, new { placeholder = "Artist, Title, or Album text" })&nbsp;
            @if (ViewBag.Dances != null)
            {
                @Html.DropDownList("Dances");
            }
            <input type="submit" value="Search" />
        </div>

        <div class="form-group">
            Include only song available on:
            <label>
                <input type="checkbox" name="services" id="serviceX" value="X" @checkX />
                XBox
            </label>
            <label>
                <input type="checkbox" name="services" id="serviceA" value="A" @checkA />
                Amazon
            </label>
            <label>
                <input type="checkbox" name="services" id="serviceI" value="I" @checkI />
                ITunes
            </label>
        </div>

        <div class="form-group">
            Tempo between @Html.TextBox("TempoMin", ViewBag.SongFilter.TempoMin as decimal?, new { @class = "input-small" })&nbsp;and&nbsp;
            @Html.TextBox("TempoMax", ViewBag.SongFilter.TempoMax as decimal?, new { @class = "input-small" }) &nbsp;BPM
        </div>

        <input type="hidden" name="filter" value="@ViewBag.SongFilter.ToString()" />
    }
    <button id="ShowBasic" type="button" class="btn btn-info btn-xs btn-block"><< Basic Search</button>
</div>

@using (Html.BeginForm("BulkEdit","Song")) {
    @Html.AntiForgeryToken()

<table class="table table-striped">
    <thead>
        <tr>
            @if (canEdit)
            {
                <th>&nbsp;</th>
            }
            <th style="min-width:75pt">
                @Html.ActionLink("Title", "Sort", new { sortOrder="Title", filter = ViewBag.SongFilter })
                @Html.Raw(ViewBag.TitleSort)
            </th>
            <th style="min-width:75pt">
                @Html.ActionLink("Artist", "Sort", new { sortOrder = "Artist", filter = ViewBag.SongFilter })
                @Html.Raw(ViewBag.ArtistSort)
            </th>
            <th style="min-width:75pt">
                @Html.ActionLink("Album", "Sort", new { sortOrder = "Album", filter = ViewBag.SongFilter })
                @Html.Raw(ViewBag.AlbumSort)
            </th>
            <th>Tempo (BPM)</th>
            <th>Dances</th>
            <th></th>
            @if (showDiag)
            {
                <th>SongId</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            if (item.Title != null)
            {
                <tr>
                    @if (canEdit)
                    {
                        string id = "Selected-" + item.SongId.ToString();
                        <td><input name="selectedSongs" id="@id" type="checkbox" value="@item.SongId" /></td>
                    }
                    <td>
                        @Html.ActionLink(item.Title, "Details", new { id = item.SongId, filter = ViewBag.SongFilter })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Artist)
                    </td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(item.Album))
                        {
                            string[] albums = item.Album.Split(new char[] { '|' });
                            if (albums.Length > 0)
                            {
                                <text>@albums[0]</text>
                            }
                            else
                            {
                                <text></text>
                            }
                        }
                    </td>
                    <td>
                        @if (item.Tempo != null)
                        {
                            string tempo = decimal.Round(item.Tempo.Value).ToString("F0");
                            @tempo;
                        }
                    </td>
                    <td>
                        @{ var separator = ""; }
                        @foreach (var ditem in item.DanceRatings)
                        {
                            @separator;
                            @Html.DisplayFor(m => ditem.Dance.Info.Name)
                          separator = ", ";
                        }
                    </td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('X'))
                        {
                            var xid = "X"+ item.SongId.ToString();
                            <button id="@xid" type="button"><img src="@Url.Content("~/Content/xbox-logo.png")" alt="Availiable on Xbox Music" width="20" height="20" /></button>
                        }
                        @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('I'))
                        {
                            var iid = "I" + item.SongId.ToString();
                            <button id="@iid" type="button"><img src="@Url.Content("~/Content/itunes-logo.png")" alt="Availiable on Itunes" width="20" height="20" /></button>
                        }
                        @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('A'))
                        {
                            var aid = "A" + item.SongId.ToString();
                            <button id="@aid" type="button"><img src="@Url.Content("~/Content/amazon-logo.png")" alt="Availiable at Amazon" width="20" height="20" /></button>
                        }
                    </td>
                    @if (showDiag)
                    {
                        <td>
                            @Html.DisplayFor(m => item.SongId)
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
    
<p>
    @if (canEdit)
    {
        <input type="hidden" name="filter" value="@ViewBag.SongFilter" />
        <input type="submit" name="action" value="Merge" class="btn"/>
        <input type="submit" name="action" value="Delete" class="btn" />
        @Html.ActionLink("Add New Song", "Create", null, new { @class = "btn btn-default", role = "button" });
        @Html.ActionLink("XBox Match", "BatchXbox", new { filter = ViewBag.SongFilter, count=500 }, new { @class = "btn btn-default", role="button"});
    }    
</p>
}

Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
(@Model.TotalItemCount songs found.)

@Html.PagedListPager(Model, page => Url.Action(ViewBag.SongFilter.Action, new { page, filter=ViewBag.SongFilter }))

@section Scripts {
    @if (ViewBag.AdvancedSearch == true)
    {
        <script>var showAdvanced = true</script>
    }
    else
    {
        <script>var showAdvanced = false</script>
    }
    <script src="@Url.Content("~/Scripts/songindex.js?@Html.Raw(DateTime.Now.Ticks.ToString())")" type="text/javascript"></script>
}