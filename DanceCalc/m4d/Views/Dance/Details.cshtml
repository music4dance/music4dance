@using m4dModels
@using MarkdownDeep
@model SongCounts

@{
    ViewBag.Title = Model.DanceName + " Information, Top Ten List, and Resources.";
    ViewBag.Description = "General informartion about " + Model.DanceName + " along with a top ten list, tempo informstion, and other resources.";
    ViewBag.NoSort = true;
    ViewBag.ShowTempo = true;
    ViewBag.HideDances = true;
    ViewBag.SongFilter = new SongFilter { Dances = @Model.DanceId };

    string description = @"<p>We're busy doing research and pulling together a general description for " + Model.DanceName + @".  Please check back later for more info.</p>";
    if (!string.IsNullOrWhiteSpace(Model.Dance.Description))
    {
        var md = new Markdown();
        md.ExtraMode = true;
        md.SafeMode = false;
        description = Model.Dance.Description;
        description = Dance.SmartLinks(description,true);
        description = md.Transform(description);
    }
}

<ol class="breadcrumb">
    <li><a href="/">Music4Dance</a></li>
    <li><a href="/dances">Dances</a></li>
    @if (@Model.Parent != null && @Model.Parent.DanceId != "All")
    {
        <li><a href="/dances/@Model.Parent.SeoName">@Model.Parent.DanceName</a></li>
    }
    <li><a href="/dances/@Model.SeoName">@Model.DanceName</a></li>
</ol>

<h2>@Model.DanceName</h2>

<div>
    @Html.Raw(description)
</div>

<div>
    <h3>@Html.ActionLink("music4dance's", "Index", "Home") top 10 @Html.ActionLink(@Model.DanceName, "Search", "Song", new { dances = @Model.DanceId }, null) songs</h3>
</div>
<div>
    @{Html.RenderPartial("_ListSongs", @Model.TopSongs, ViewData);}
</div>

<div>
    <iframe src="https://embed.spotify.com/?uri=spotify:trackset:@Model.DanceName:@Model.TopSpotify" frameborder="0" allowtransparency="true"></iframe>
</div>

<div>
    <p>@Html.ActionLink("Browse", "Search", "Song", new { dances = @Model.DanceId }, null) all <b>@Model.SongCount</b> @Model.DanceName songs in the music4dance @Html.ActionLink("catalog", "Search", "Song").</p>
</div>


@if (@Model.Parent != null)
{
    var info = Model.Dance.Info;
    var tempo = info.TempoRange;
    <hr />
    <div>
        <h4>Tempo Information</h4>
        <p>
            The @Model.DanceName is generally danced to music in a @info.Meter Meter
            @if (@tempo.Max == @tempo.Min)
            {
                <text>at @tempo.Max measures per minute (@(tempo.Max * info.Meter.Numerator) beats per minute)</text>
            }
            else
            {
                <text>between @tempo.Min and @tempo.Max measures per minute (@(tempo.Min * info.Meter.Numerator) and @(tempo.Max * info.Meter.Numerator) beats per minute)</text>
            }
            .
        </p>
        <p>For more information about tempi, please take a look at the @Html.ActionLink("Tempi Tool", "Tempi", "Home").</p>
    </div>
}

@if (@Model.Parent == null)
{
    <hr />
    <div>
        <h4>Dances that are grouped into the @Model.DanceName category.</h4>
        <div class="list-group">
            @{Html.RenderPartial("_DanceList", @Model.Children);}
        </div>
    </div>
}

@if (Model.Dance.DanceLinks != null && Model.Dance.DanceLinks.Count > 0)
{
    <h4>References</h4>
    <ul>
        @foreach (var dl in Model.Dance.DanceLinks)
        {
            <li><b>@dl.Description:</b> <a href="@dl.Link">@dl.Link</a></li>
        }
    </ul>
}

<p>
    @if (User.IsInRole("canEdit"))
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.DanceId }, new { @class = "btn btn-default", role = "button" })
    }
</p>

@{
    string pageScript = "~/Scripts/showdance.js" + Page.ScriptQualifier;
    string msScript = "~/Scripts/musicservice.js" + Page.ScriptQualifier;
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="@Url.Content(msScript)" type="text/javascript"></script>
    <script src="@Url.Content(pageScript)" type="text/javascript"></script>
}

