@using System.Data.SqlTypes
@using DanceLibrary
@model IEnumerable<SongBase>

@{
    var isAdmin = User.IsInRole("dbAdmin");
    var canSort = ViewData.ContainsKey("NoSort") ? !ViewBag.NoSort : true;
    var hideDances = ViewData.ContainsKey("HideDances") ? ViewBag.HideDances : false;
    string albumName = ViewData.ContainsKey("AlbumName") ? ViewBag.AlbumName : null;
    var hideArtist = ViewData.ContainsKey("HideArtist") ? ViewBag.HideArtist : false;
    var showLength = ViewData.ContainsKey("ShowLength") ? ViewBag.ShowLength : false;

    var danceMap = (IDictionary<string, SongCounts>)ViewBag.DanceMap;
    var songOrder = new SongSort(ViewBag.SongFilter.SortOrder);
    var showDate = canSort;
    SongFilter filter = ViewData.ContainsKey("SongFilter") ? ViewBag.SongFilter : new SongFilter();
    Dictionary<Guid, bool?> likes = ViewData.ContainsKey("Likes") ? ViewBag.Likes : null;
    var activeLikes = (likes == null) ? string.Empty : "toggle-like";

    const string heartTipNull = "Click to like/dislike this song.";
    const string heartTipTrue = "You have liked this song, click to dislike";
    const string heartTipFalse = "You have disliked this song, click to reset";
}

@helper ArtistHeader(bool canSort, SongSort songOrder, SongFilter filter)
{
    if (canSort)
    {
        @Html.ActionLink("Artist", "Sort", "Song", new { sortOrder = "Artist", filter }, null)
        @Html.Raw(songOrder.GetSortGlyph("Artist"))
    }
    else
    {
        <text>Artist</text>
    }
}

@helper Artist(SongBase song)
{
    if (!string.IsNullOrWhiteSpace(song.Artist))
    {
        @Html.ActionLink(song.Artist, "search", "song", new { searchString = song.Artist, dances = "ALL" }, null)
    }
}

@helper TagHeader(SongFilter filter)
{
    <text>Tags</text>
    if (!string.IsNullOrWhiteSpace(filter.Tags))
    {
        var tags = new TagList(filter.Tags);
        var inc = tags.ExtractAdd();
        var exc = tags.ExtractRemove();
        if (!inc.IsEmpty)
        {
            <br /><span>Included:</span>
            foreach (var tag in inc.Tags)
            {
                if (!tag.Contains(':')) {continue;}

                var rg = tag.Split(':');
                var url = "/song/removetags?tags=" + WebUtility.UrlEncode(tag) + "&filter=" + WebUtility.UrlEncode(filter.ToString());
                var img = "/Content/" + TagType.ClassToName(rg.Length > 0 ? rg[1] : "tag") + "-50.png";
                <span class="label label-@rg[1].ToLower()" style="margin-right: 5px"><a role="button" class="tag-text" href="@url"><img src="@img" height="12" width="12" />@rg[0] <span class="glyphicon glyphicon-remove-sign"></span></a></span>
            }
        }
        if (!exc.IsEmpty)
        {
            <br /><span>Excluded:</span>
            foreach (var tag in exc.Tags)
            {
                var rg = tag.Split(':');
                var url = "/song/removetags?tags=" + WebUtility.UrlEncode(tag) + "&filter=" + WebUtility.UrlEncode(filter.ToString());
                <span class="label label-@rg[1].ToLower()" style="margin-right: 5px"><a role="button" class="tag-text" href="@url">@rg[0] <span class="glyphicon glyphicon-remove-sign"></span></a></span>
            }
        }
    }
}

@helper Tags(SongBase song, SongFilter filter) 
{
    foreach (var titem in song.TagSummary.Tags.Where(t => !string.Equals(t.TagClass, "dance", StringComparison.OrdinalIgnoreCase)))
    {
        @TagHelpers.TagButton(titem, filter)
    }
}

@helper TimeHelper(SongBase song, SongSort order)
{
    var created = order.Id == "Created";
    var prefix = created ? "Created" : "Last modified";
    var time = created ? song.Created : song.Modified;
    var delta = created ? song.CreatedOrderVerbose : song.ModifiedOrderVerbose;
    var timeMessage = prefix + " on " + time.ToString("g") + " (" + delta + " ago)";

    <td class="hidden-xs" data-toggle="tooltip" data-placement="left" title="@timeMessage">
        @(created ? @song.CreatedOrder : @song.ModifiedOrder)
    </td>
}

<script>
    window.HeartOptions = {
        'true': { tip: '@heartTipTrue', img: '' },
        'false': { tip: '@heartTipFalse', img: '-broken' },
        'null': {tip: '@heartTipNull', img: '-outline'}
    };
</script>

<table class="table table-striped table-songs">
    <thead>
    <tr>
        <th style="width:75px">Like/Play</th>

        @if (isAdmin)
        {
            <th>&nbsp;</th>
            if (canSort)
            {
                <th>&nbsp;</th>
            }
        }
        <th style="min-width:75px">
            @if (canSort)
            {
                @Html.ActionLink("Title", "Sort", "Song", new {sortOrder = "Title", filter}, null)
                @Html.Raw(songOrder.GetSortGlyph("Title"))
            }
            else
            {
                <text>Title</text>
            }
            @if (!hideArtist)
            {
                <span class="visible-xs"> - @ArtistHeader(canSort, songOrder, filter)</span>
            }
        </th>
        @if (!hideArtist)
        {
            <th class="hidden-xs" style="min-width:75px">
                @ArtistHeader(canSort, songOrder, filter)
            </th>
        }
        @if (albumName == null)
        {
                @* TODO: Reinstate album name when we get user selectable columns
                    <th style="min-width:75pt" class="hidden-xs">
                    @if (canSort)
                    {
                        @Html.ActionLink("Album", "Sort", "Song", new { sortOrder = "Album", filter }, null)
                        @Html.Raw(songOrder.GetSortGlyph("Album"))
                    }
                    else
                    {
                        <text>Album</text>
                    }
                </th>*@
        }
        else
        {
            <th style="min-width:75px" class="hidden-xs">
                Track
            </th>
        }
        <th class="hidden-xs">
            @if (canSort)
            {
                @Html.ActionLink("Tempo (BPM)", "sort", "song", new {sortOrder = "Tempo", filter}, null)
                @Html.Raw(songOrder.GetSortGlyph("Tempo"))
            }
            else
            {
                <text>Tempo (BPM)</text>
            }
        </th>
        @if (showLength)
        {
            <th class="hidden-xs">
                Length
            </th>
        }


        @if (!hideDances)
        {
            <th style="max-width:200px">
                @if (canSort)
                {
                    @Html.ActionLink("Dances", "sort", "song", new {sortOrder = "Dances", filter}, null)
                    @Html.Raw(songOrder.GetSortGlyph("Dances"))
                }
                else
                {
                    <text>Dances</text>
                }
                <span class="visible-xs"> - @TagHeader(filter)</span>
            </th>
        }
        <th style="max-width:200px" class="@(hideDances ? string.Empty : "hidden-xs")">@TagHeader(filter)</th>
        @if (isAdmin)
        {
            <th></th>
        }
        @if (showDate)
        {
            var created = (songOrder.Id == "Created");
            var dateId = created ? "Created" : "Modified";
            <th class="hidden-xs" style="min-width:50px">
                <a href="@Url.Action("sort", "song", new {sortOrder = dateId, filter})"><span class='glyphicon @(created ? "glyphicon-plus" : "glyphicon-pencil")'></span></a>
                @Html.Raw(songOrder.GetSortGlyph(dateId))
            </th>
        }
    </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            SongDetails sd = null;
            if (albumName != null)
            {
                sd = item as SongDetails;
            }
            List<DanceRating> scaledDances = null;
            if (item.DanceRatings != null)
            {
                scaledDances = item.DanceRatings.OrderByDescending(dr => SongCounts.GetScaledRating(danceMap, dr.DanceId, dr.Weight)).ToList();
            }
            string tempoString = null;
            if (item.Tempo.HasValue)
            {
                var numerator = 4;
                if (scaledDances != null && scaledDances.Count > 0)
                {
                    var did = scaledDances[0].DanceId;
                    if (!string.IsNullOrWhiteSpace(did))
                    {
                        numerator = Dances.Instance.DanceFromId(did).Meter.Numerator;
                    }
                }
                tempoString = string.Format("<a href='/home/counter?numerator={1}&tempo={0}'>{0}</a>", decimal.Round(item.Tempo.Value), numerator);
            }

            if (item.Title != null)
            {
            <tr>
                <td>
                    @{
                        bool? like;
                        if (likes == null || !likes.TryGetValue(item.SongId, out like))
                        {
                            like = null;
                        }
                        var heart = "outline-";
                        var heartAlt = "No Opinion";
                        var heartTip = heartTipNull;
                        var href = "#";
                        var state = "null";

                        if (likes == null)
                        {
                            heartTip = "Sign In to like/dislike songs.";
                            href = "/account/signin?ReturnUrl=" + Request.Url;
                        }
                        else if (like.HasValue)
                        {
                            if (like.Value)
                            {
                                heart = string.Empty;
                                state = "true";
                                heartAlt = "Like";
                                heartTip = heartTipTrue;
                            }
                            else
                            {
                                heart = "broken-";
                                state = "false";
                                heartAlt = "Dislike";
                                heartTip = heartTipFalse;
                            }
                        }
                        var heartImg = string.Format("~/Content/heart-{0}icon.png", heart);

                        <a id="like.@item.SongId" class="btn btn-sm btn-info @activeLikes" style="padding:3px" role="button" href="@href" data-like="@state" data-toggle="tooltip" data-placement="right" title="@heartTip">
                            <img src='@Url.Content(heartImg)' alt="@heartAlt"/>
                        </a>
                        if (!string.IsNullOrWhiteSpace(item.Purchase))
                        {
                            var id = "Play" + item.SongId;
                            <div class="btn-group">
                                <a href="#" id="@id" role="button" class="btn dropdown-toggle"  style="padding:0" data-toggle="dropdown" aria-expanded="false"><img src="@Url.Content("~/Content/playbutton.png")" alt="Play" width="20" height="20"/></a>
                                <ul class="dropdown-menu" role="menu">
                                    @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('X'))
                                    {
                                        var xid = "X" + item.SongId;
                                        <li><a href="#" id="@xid" class="play-link"><img src='@Url.Content("~/Content/xbox-logo.png")' alt="Availiable on Groove Music" width="20" height="20"/> Groove</a></li>
                                    }
                                    @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('I'))
                                    {
                                        var iid = "I" + item.SongId;
                                        <li><a href="#" id="@iid" class="play-link"><img src='@Url.Content("~/Content/itunes-logo.png")' alt=" availiable on itunes" width="20" height="20"/> ITunes</a></li>
                                    }
                                    @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('A'))
                                    {
                                        var aid = "A" + item.SongId;
                                        <li><a href="#" id="@aid" class="play-link"><img src='@Url.Content("~/Content/amazon-logo.png")' alt=" availiable at amazon" width="20" height="20"/> Amazon</a></li>
                                    }
                                    @if (!string.IsNullOrEmpty(item.Purchase) && item.Purchase.Contains('S'))
                                    {
                                        var sid = "S" + item.SongId;
                                        <li><a href="#" id="@sid" class="play-link"><img src='@Url.Content("~/Content/spotify-logo.png")' alt=" availiable on spotify" width="20" height="20"/> Spotify</a></li>
                                    }
                                </ul>
                            </div>
                        }
                    }
                </td>
                @if (isAdmin)
                    {
                        var id = "Selected-" + item.SongId;
                        if (canSort)
                        {
                            <td><input name="selectedSongs" id="@id" type="checkbox" value="@item.SongId" /></td>
                            }
                        <td><a href="/song/edit?id=@item.SongId&filter=@filter" role="button" class="btn btn-link btn-sm"><span class="glyphicon glyphicon-pencil"></span></a></td>
                    }

                    <td>
                        @Html.ActionLink(item.Title, "details", "song", new { id = item.SongId, filter }, null)
                        @if (tempoString != null)
                    {
                            <small class="hidden-sm hidden-md hidden-lg">(@Html.Raw(tempoString) BPM)</small>
                        }
                        <span class="visible-xs"> - @Artist(item)</span>
                    </td>

                    @if (!hideArtist)
                    {
                        <td class="hidden-xs">@Artist(item)</td>
                    }

                    @if (albumName == null)
                    {
                        @*<td class="hidden-xs">
                            @if (!string.IsNullOrWhiteSpace(item.AlbumName))
                            {
                                @Html.ActionLink(item.AlbumName, "album", "song", new { title = item.AlbumName }, null)
                            }
                        </td>*@
                    }
                    else
                    {
                        <td class="hidden-xs">
                            @{
                                var track = sd.TrackFromAlbum(albumName);
                                if (track > 0)
                                {
                                    @track.ToString()
                                }
                            }
                        </td>
                    }
                    <td class="hidden-xs">
                        @if (tempoString != null)
                        {
                            @Html.Raw(tempoString)
                        }
                    </td>
                    @if (showLength)
                    {
                        <td class="hidden-xs">
                            @if (item.Length != null)
                            {
                                @((new SongDuration(item.Length.Value)).ToString());
                            }
                        </td>
                    }
                    @if (!hideDances)
                    {
                        <td>
                            @if (scaledDances != null)
                            {
                                const string bstring = "<br />";
                                foreach (var ditem in scaledDances)
                                {
                                    // TODO: Dance name pulled from the danceMap doesn't require a db lookup - is there a way
                                    //  to make the more intuitive ditem.Dance.Name work without a lookup???
                                    var badge = SongCounts.GetRatingBadge(danceMap, ditem.DanceId, ditem.Weight);
                                    var name = danceMap[ditem.DanceId].DanceName;
                                    var label = name;
                                    var tags = string.Empty;
                                    if (!string.IsNullOrWhiteSpace(ditem.TagSummary.Summary))
                                    {
                                        label = label + " <span class='glyphicon glyphicon-asterisk' aria-hidden='true'></span>";
                                        tags += bstring;
                                        foreach (var dtitem in ditem.TagSummary.Tags)
                                        {
                                            tags += TagHelpers.TagButton(dtitem, filter); //"<span class=\"label label-" + dtitem.TagClass.ToLower() + "\">" + dtitem.TagValue + "</span> ";
                                        }
                                    }
                                    var danceQuery = filter.DanceQuery;
                                    var isExclusive = danceQuery.IsExclusive || !danceQuery.Dances.Any();
                                    var hasDance = danceQuery.HasDance(ditem.DanceId);

                                    var content = MvcHtmlString.Create(
                                        Html.ActionLink(name + " dance page...", name, "dances") +
                                        (!filter.IsEmpty && isExclusive && !hasDance ? bstring + Html.ActionLink("Filter list to songs tagged as " + name + "...", "search", "song", new { dances = danceQuery.AddDance(ditem.DanceId).Query, filter }, null) : string.Empty) +
                                        (!filter.IsEmpty && !isExclusive && !hasDance ? bstring + Html.ActionLink("Expand list to included songs tagged as " + name + "...", "search", "song", new { dances = danceQuery.AddDance(ditem.DanceId).Query, filter }, null) : string.Empty) +
                                        bstring + Html.ActionLink("List all " + name + " songs...", "search", "song", new { dances = ditem.DanceId }, null) +
                                        bstring + "<a href=\"https://www.music4dance.net/blog/tag-filtering\">Help</a>" +
                                        tags );

                                    <a href='#!' class='rating @badge label label-music' role='button'
                                       data-container='body' data-toggle='popover' data-placement='left' data-title='@Html.ActionLink(name, name, "dances")'
                                       data-content='@content'>@Html.Raw(label)</a>
                                }
                            }
                            <span class="visible-xs">@Tags(item, filter)</span>
                        </td>
                    }
                    <td class="@(hideDances ? string.Empty : "hidden-xs")">@Tags(item,filter)</td>

                    @if (isAdmin)
                    {
                        <td>@item.Purchase</td>
                    }

                    @if (showDate)
                    {
                        @TimeHelper(item,songOrder)
                    }

                </tr>
            }
        }
    </tbody>
</table>
