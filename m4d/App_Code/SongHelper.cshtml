@using System.Web.Mvc
@using System.Web.Mvc.Html
@using m4dModels
@using Microsoft.Azure.Search.Models
@using PagedList.Mvc;

@helper Spotify(IEnumerable<Song> songs)
{
    <div id="spotify-player" class="col-md-6" data-trackset-name="music4dance" data-trackset-songs="@string.Join(",", songs.Select(s => s.SongId))">
        <button class="btn-default btn-block btn-lg">Show Spotify Player</button>
    </div>
}

@helper CustomHeader(System.Web.Mvc.HtmlHelper html, string description)
{
    var parts = description.Split('|');
    <h1>@parts[0]</h1>
    if (parts.Length > 1)
    {
        <div class="row">
            <h4 class="col-sm-12">@parts[1]</h4>
        </div>
    }
}

// Advanced search header
@helper AdvancedHeader(System.Web.Mvc.HtmlHelper html, SongFilter filter)
{
    var url = "/song/" + (filter.IsRaw ? "raw" : "advanced") + "searchform?filter=" + filter;
    <h1>
        Search Results
        @if (filter.IsRaw)
        {
            <text> (RAW)</text>
        }
    </h1>
    <div class="row">
        <div class="col-sm-6"><h4>@filter.Description</h4></div>
        <div class="col-sm-2 col-sm-offset-2">
            <a href="@url" class="btn btn-default">Change Search <span class="glyphicon glyphicon-search"></span></a>
        </div>
    </div>
}

// Basic search header
@helper SimpleHeader(System.Web.Mvc.HtmlHelper html, SongFilter filter, IList<DanceStats> dances, string userName)
{
    var danceQuery = filter.DanceQuery;
    var isAzure = filter.IsAzure;

    using (html.BeginForm(isAzure ? "AzureSearch" : "Search", "Song", FormMethod.Get, new { id = "search" }))
    {
        var danceName = (danceQuery.All || danceQuery.Advanced) ? "All Dances" : danceQuery.Dances.First().Name;

        <div class="row">
            <h1 class="col-sm-2" style="width: auto; font-size: 22px;">
                Song Library
            </h1>
            <div class="col-sm-offset-2" style="margin-left: 1px">
                <div class="input-group" style="margin-top: 1em">
                    <div class="input-group-btn search-panel">
                        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="margin-left: 15px">
                            <span id="dance_selector">@danceName</span> <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li id="DID_ALL"><a href="#ALL"><strong>All Dances</strong></a></li>
                            @foreach (var sc in dances.OrderBy(x => x.DanceName))
                            {
                                var id = "DID_" + sc.DanceId;
                                var href = "#" + sc.DanceId;
                                <li id="@id"><a href=@href><strong>@sc.DanceName</strong></a></li>
                                foreach (var sci in sc.Children.OrderBy(x => x.DanceName))
                                {
                                    if (sci.SongCount > 0)
                                    {
                                        id = "DID_" + sci.DanceId;
                                        href = "#" + sci.DanceId;
                                        <li id="@id"><a href=@href><small>&nbsp;@sci.DanceName</small></a></li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                    <input type="hidden" name="dances" id="dances" value="@filter.Dances" />
                    <input type="hidden" name="filter" id="filter" value="@filter.ToString()" />
                    <input type="hidden" name="tags" id="tags" />
                    @html.TextBox("SearchString", filter.SearchString, new { @class = "form-control search-text", placeholder = "Artist, Title, Dance, Tags, etc...", id = "search-text" })
                    <span class="input-group-btn">
                        <button id="submit-search" class="btn btn-default" type="submit" style="margin-right: 15px"><span class="glyphicon glyphicon-search"></span></button>
                    </span>
                </div>
            </div>
        </div>
        <div class="row">
            <p class="col-xs-6">  @html.ActionLink("Saved Searches", "index", "searches", new { user = userName, filter }, new { id = "saved-search" })</p>
            <p class="col-xs-6" style="text-align: right; padding-right:20px">@html.ActionLink("Advanced Search", "advancedsearchform", "song", new { filter }, new { id = "advanced-search" })</p>
        </div>
    }
}

@helper SearchHeader(System.Web.Mvc.HtmlHelper html, SongFilter filter, IList<DanceStats> dances, string userName, string description)
{
    @(string.IsNullOrWhiteSpace(description) ? (filter.IsAdvanced ? AdvancedHeader(html, filter) : SimpleHeader(html, filter, dances, userName)) : CustomHeader(html, description))
}

@helper SearchFooter(System.Web.Mvc.HtmlHelper html, UrlHelper urlHelp, PagedList.IPagedList<Song> songs, SongFilter filter, bool hideInferred = false, bool hideSpotify = false, bool showExport = false)
{
    var danceQuery = filter.DanceQuery;

    <div class="row">
        <div class="col-md-6">
            @html.PagedListPager(songs, page => urlHelp.Action(filter.TargetAction, new { page, filter }))
        </div>
        <div class="col-md-2 pagination-align">
            Page @(songs.PageCount < songs.PageNumber ? 0 : songs.PageNumber) of @songs.PageCount
            (@songs.TotalItemCount songs found.)
        </div>
        <div class="col-md-4 pagination-align">
            @if (!danceQuery.All)
            {
                foreach (var dance in danceQuery.Dances)
                {
                    @html.ActionLink(dance.Name + " Page", dance.Name, "dances", new { filter, type = "I", count = 1 }, new { @class = "btn btn-default", role = "button" })
                }
            }
            @if (!filter.IsAdvanced)
            {
                if (!filter.IsEmpty)
                {
                    @html.ActionLink("New Search", string.Empty, "song", new { @class = "btn btn-default", role = "button" })
                }
            }
        </div>
    </div>
    if (!danceQuery.IncludeInferred && !filter.IsRaw && !hideInferred)
    {
        var newFilter = filter.ToggleInferred();
        <div class="row">
            <div class="col-md-12">
                <p class="big-text">
                    Not seeing as many songs as you expect in this list?
                    You are currently seeing only songs that someone has explicitly tagged as @(danceQuery.ToString()).
                    You can widen the search by choosing to include songs inferred by tempo on the @html.ActionLink("Advanced Search page", "AdvancedSearchForm", "Song", new { filter = newFilter }, null)
                    or just @html.ActionLink("clicking here", filter.TargetAction, "Song", new { filter = newFilter }, null).
                </p>
            </div>
        </div>
    }

    if (filter.IsAdvanced)
    {
        if (!hideSpotify)
        {
            <div class="row">
                @Spotify(songs)
            </div>
        }
    }
    else
    {
        <div class="row">
            @if (!hideSpotify)
            {
                @Spotify(songs)
            }
            <div class="col-md-6"><h4>@filter.Description</h4></div>
        </div>
    }

    if (!hideSpotify && showExport)
    {
        <div class="row">
            <div class="col-md-12">
                <h4>Create a Spotify Playlist with the results of this search:</h4>
                <p text="big-text">If you are <a href="https://www.music4dance.net/blog/music4dance-help/account-management/">signed in</a>, have a <a href="https://www.music4dance.net/blog/music4dance-help/subscriptions/">premium subsription</a> and have <a href="https://www.music4dance.net/blog/music4dance-help/account-management/#add-external-account">associated a Spotify account with your music4dance account</a>, this will create a spotify playlist in your account with the top 50 results of the above search.</p>
                @using (html.BeginForm("CreateSpotify", "Song", new { filter }, FormMethod.Post, new { id = "create-playlist", @class = "form-inline" }))
                {
                    @html.AntiForgeryToken()

                    <div class="form-group">
                        <label for="playlist-title">Title:</label>
                        <input type="text" name="title" class="form-control" value="@(string.IsNullOrWhiteSpace(filter.ShortDescription) ? "music4dance playlist" : filter.ShortDescription)" style="width:300em" id="playlist-title" />
                        <button type="submit" class="btn btn-default">Create</button>
                    </div>
                }

            </div>
        </div>
    }
}

@helper ShowRawSearch(SearchParameters raw)
{
    <div class="row">
        <div class="col-md-12">
            <b>Raw Search: </b>@WebUtility.UrlDecode(raw.ToString())<br />
            @if (raw.Filter != null)
            {
                <b>Raw Search Filter: </b>@WebUtility.UrlDecode(raw.Filter)<br />
            }
            @if (raw.OrderBy != null && raw.OrderBy.Count > 0)
            {
                <b>Raw Search OrderBy: </b>@WebUtility.UrlDecode(string.Join(",", raw.OrderBy))<br />
            }
        </div>
    </div>
}

@helper LikeHelper(WebViewPage page, Song song, LikeDictionary likes, string img, string modifier, string danceId, string tipNull, string tipTrue, string tipFalse)
{
    if (likes == null || !likes.TryGetValue(song.SongId, out var like))
    {
        like = null;
    }
    var heart = "outline-";
    var heartAlt = "No Opinion";
    var heartTip = string.Format(tipNull, modifier);
    var href = "#";
    var state = "null";

    if (likes == null)
    {
        heartTip = "Sign In to like/dislike {0}.";
        href = "/account/signin?ReturnUrl=" + Request.Url;
    }
    else if (like.HasValue)
    {
        if (like.Value)
        {
            heart = string.Empty;
            state = "true";
            heartAlt = "Like";
            heartTip = tipTrue;
        }
        else
        {
            heart = "broken-";
            state = "false";
            heartAlt = "Dislike";
            heartTip = tipFalse;
        }
    }

    var type = danceId ?? "like";
    <a id="@type.@song.SongId" class="btn btn-sm btn-info @(likes == null ? string.Empty : "toggle-like")" style="padding:3px" role="button" href="@href" data-like="@state" data-toggle="tooltip" data-placement="right" title="@string.Format(heartTip,modifier)">
        <img src='@page.Url.Content($"~/Content/{img}-{heart}icon.png")' alt="@heartAlt" />
    </a>
}
