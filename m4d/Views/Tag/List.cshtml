@using m4d.ViewModels
@using m4dModels
@model IEnumerable<m4dModels.TagGroup>

@{
    ViewBag.Title = "Tag List";
ViewBag.Description = "Explore songs based on musical genre, tempo, style and other tags.";
ViewBag.SongFilter = SongFilter.GetDefault(User.Identity.Name);
}
<h1>@ViewBag.Title</h1>

@if (User.IsInRole("dbAdmin"))
{
    <p>Create new tags through consumer UI of adding a tag to a song</p>
    <p>@Html.ActionLink("Clean up tags", "CleanupTags")</p>

    <table class="table table-striped">
        <tr>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Key)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Count)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Primary.PrimaryId)
            </th>
            <th scope="col">
                Children
            </th>
            <th scope="col"></th>
        </tr>

        @foreach (var item in Model)
    {
        var item1 = item;
        <tr>
                <td>
                    @Html.ActionLink(item.Key, "tags", "song", new
                {
                    tags = item.Key
                }, null)
                    @if (item.IsConected)
                {
                    <b>*</b>
                }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item1.Count)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item1.PrimaryId)
                </td>
                <td>
                    @if (item.Children != null && item.Children.Count > 0)
                {
                    var separator = "";
                    foreach (var child in item.Children)
                    {
                        @separator
                        @child.Key
                        separator = ",";
                    }
                }
                </td>

                <td>
                    @Html.ActionLink("Edit", "Edit", new
                {
                    id = item.EncodedKey
                }) |
                    @Html.ActionLink("Details", "Details", new
                {
                    id = item.EncodedKey
                })
                    @if (!string.IsNullOrWhiteSpace(item.PrimaryId))
                {
                    <text>|</text>
                    @Html.ActionLink("Delete", "Delete", new
                    {
                        id = item.EncodedKey
                    })                        
                }
                </td>
            </tr>
    }
    </table>
}

@section Scripts
{
    @{
        var scripts = new ScriptModel
        {
            DevelopmentFiles = new[] {"musicservice"}
        };
    }

    <partial name="_scriptInclude" model="@scripts"/>
}