@using m4dModels
@model m4dModels.PlaylistCreateInfo

@{
    ViewBag.Title = "New Spotify Playlist";
    var filter = new SongFilter(Model.Filter);
    var canCreate = Model.IsAuthenticated && Model.IsPremium && Model.CanSpotify;
    var returnUrl = $"/song/createspotify?filter={filter}";
}

<div class="row">
    <h1 class="col-sm-12">@ViewBag.Title</h1>
</div>

<div class="hr-music"></div>

<div class="row">
    <h4 class="col-sm-12">Create a Spotify Playlist with the results of this search: <b>@filter.Description</b></h4>
</div>

<div class="row spaced-row">
    <div text="big-text" class="col-sm-10">
        In order to successfully create a Spotify Playlist from a music4dance search you must meet the following conditions:
        <ol>
            <li>
                Be
                <a asp-area="Identity" asp-page="/Account/Login" asp-route-ReturnUrl="@returnUrl">
                    signed in
                </a>
                @if (Model.IsAuthenticated)
                {
                    <span class="fas fa-check-circle mx-2"></span>
                }
                else
                {
                    <text>
                        &mdash; <a href="https://music4dance.blog/music4dance-help/account-management/">(help)</a>
                    </text>
                }
            </li>
            <li>
                Have a <a href="/home/contribute">premium subscription</a>
                @if (Model.IsPremium)
                {
                    <span class="fas fa-check-circle mx-2"></span>
                }
                else
                {
                    <text>
                        &mdash; <a href="https://music4dance.blog/music4dance-help/subscriptions/">(help)</a>
                    </text>
                }
            </li>
            <li>
                Have
                <a asp-area="Identity" asp-page="/Account/Manage/ExternalLogins" asp-route-ReturnUrl="@returnUrl">
                    associated a Spotify account
                </a>
                with your music4dance account
                @if (Model.IsPremium)
                {
                    <span class="fas fa-check-circle mx-2"></span>
                }
                else
                {
                    <text>
                        &mdash; <a href="https://music4dance.blog/music4dance-help/account-management/#add-external-account">(help)</a>
                    </text>
                }
            </li>
        </ol>
    </div>

    <div class="col-sm-2">
        @Html.ActionLink("Back to Search Results", ((SongFilter) ViewBag.SongFilter).TargetAction, new {filter = ViewBag.SongFilter}, new {@class = "btn btn-sm btn-primary", role = "button"})
    </div>
</div>

@if (canCreate)
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <input type="hidden" name="filter" id="filter" value="@Model.Filter"/>
        <input type="hidden" name="DescriptionPrefix" id="DescriptionPrefix" value="@Model.DescriptionPrefix"/>

        <div class="form-group row">
            @Html.LabelFor(model => model.Title, new {@class = "col-form-label col-md-1"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.Description, new {@class = "col-form-label col-md-1"})
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new {@class = "form-control", cols = "50", rows = "6"})
                @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
            </div>
            <div class="offset-md-1 col-md-10">Description will start with the prefix <i>"@Model.DescriptionPrefix"</i></div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.Count, new {@class = "col-form-label col-md-1"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Count, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Count, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group row">
            <div class="offset-md-1 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary"/>
            </div>
        </div>
    }
}