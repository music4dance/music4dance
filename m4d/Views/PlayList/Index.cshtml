@using m4d.ViewModels
@using m4dModels
@model m4dModels.PlayListIndex

@{
    ViewBag.Title = $"{Model.Type} PlayList Index";
    ViewBag.BreadCrumbs = BreadCrumbItem.BuildAdminTrail(ViewBag.Title);
}

<h1>@ViewBag.Title</h1>

<div class="row">
    <div class="col-sm-3">
        <p>
            @Html.ActionLink("Create New", "Create", new { Model.Type })
        </p>
        <p>
            @Html.ActionLink("Restore All", "RestoreAll", new { Model.Type })
        </p>
        <p>
            @Html.ActionLink("Update All", "UpdateAll", new { Model.Type })
        </p>
    </div>
    <div class="col-sm-3">
        @if (Model.Type != PlayListType.SongsFromSpotify)
        {
            <p>
                @Html.ActionLink("SongsFromSpotify", "Index", new { Type = PlayListType.SongsFromSpotify })
            </p>
        }
        @if (Model.Type != PlayListType.SpotifyFromSearch)
        {
            <p>
                @Html.ActionLink("SpotifyFromSearch", "Index", new { Type = PlayListType.SpotifyFromSearch })
            </p>
        }
    </div>
    <div class="col-sm-3">
        @if (Model.Type == PlayListType.SpotifyFromSearch)
        {
            <p>
                @Html.ActionLink("Create Dance Playlists", "BulkCreate", new { Type = PlayListType.SpotifyFromSearch, Flavor = "TopN" })
            </p>
            <p>
                @Html.ActionLink("Create Holiday Playlists", "BulkCreate", new { Type = PlayListType.SpotifyFromSearch, Flavor = "Holiday" })
            </p>
        }
    </div>
</div>

<table class="table" width="100%">
    <tr>
        <th>Id</th>
        <th>User</th>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
        @if (Model.HasData1)
        {
            <th>@Model.Data1Name</th>
        }
        @if (Model.HasData2)
        {
            <th>@Model.Data2Name</th>
        }
        <th>Created</th>
        <th>Updated</th>
        <th>Deleted</th>
        <th></th>
    </tr>

    @foreach (var item in Model.PlayLists)
    {
    <tr>
        <td>
            @Html.ActionLink(item.Id, "Details", new { id = item.Id })
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.User)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Type)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        @if (Model.HasData1)
        {
        <td>
            @(string.IsNullOrEmpty(item.Data1) ? "" : item.Data1.Substring(0, Math.Min(item.Data1.Length,50)))
        </td>
        }
        @if (Model.HasData2)
        {
        <td>
            @(string.IsNullOrEmpty(item.Data2) ? "" : item.Data2.Substring(0, Math.Min(item.Data2.Length, 50)))
        </td>
        }
        <td>
            @Html.DisplayFor(modelItem => item.Created)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Updated)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Deleted)
        </td>
        <td>
            @Html.ActionLink("Update", "Update", new { id = item.Id }) |
            @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
            @Html.ActionLink("Details", "Details", new { id = item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            @if (item.Updated.HasValue && string.IsNullOrWhiteSpace(item.Data2))
            {
                <span> | </span>
                @Html.ActionLink("Restore", "Restore", new { id = item.Id })

            }
        </td>
    </tr>
    }

</table>
