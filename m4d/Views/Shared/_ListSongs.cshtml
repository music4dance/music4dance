@using DanceLibrary
@model IEnumerable<Song>

@{
    var isAdmin = User.IsInRole("dbAdmin");
    var action = "index";

    var canSort = ViewData.ContainsKey("NoSort") ? !ViewBag.NoSort : true;
    var showDate = canSort || (ViewData.ContainsKey("ShowDate") ? ViewBag.ShowDate : false);
    var hideDances = ViewData.ContainsKey("HideDances") ? ViewBag.HideDances : false;
    string albumName = ViewData.ContainsKey("AlbumName") ? ViewBag.AlbumName : null;
    var hideArtist = ViewData.ContainsKey("HideArtist") ? ViewBag.HideArtist : false;
    var showLength = ViewData.ContainsKey("ShowLength") ? ViewBag.ShowLength : false;

    DanceStatsInstance danceStats = ViewBag.DanceStats;
    SongFilter filter = ViewData.ContainsKey("SongFilter") ? ViewBag.SongFilter : new SongFilter(action);
    var isRaw = filter.IsRaw;
    canSort = canSort && !isRaw;
    var songOrder = new SongSort(filter.SortOrder);
    var danceId = ViewData.ContainsKey("DanceId") ? ViewBag.DanceId : null;
    var danceName = (isRaw || danceId == null) ? null : danceStats.FromId(danceId).DanceName;
    var azureSearch = filter.IsAzure;
    LikeDictionary likes = ViewData.ContainsKey("Likes") ? ViewBag.Likes : null;
    LikeDictionary danceLikes = ViewData.ContainsKey("DanceLikes") ? ViewBag.DanceLikes : null;

    var filterNoDance = new SongFilter(filter.ToString())
    {
        Dances = null,
        SortOrder = null
    };
    var danceQuery = filter.DanceQuery;
    var numDances = danceQuery.Dances.Count();
    var isExclusive = danceQuery.IsExclusive || numDances < 2;
    var isInclusive = (!danceQuery.IsExclusive || numDances == 1) && (filterNoDance.IsEmptyPaged || numDances > 1);

    const string likeTipNull = "Click to like/dislike {0}.";
    const string likeTipTrue = "You have liked {0}, click to dislike";
    const string likeTipFalse = "You have disliked {0}, click to reset";
}

@helper ArtistHeader(bool canSort, SongSort songOrder, SongFilter filter)
{
    if (canSort)
    {
        @Html.ActionLink("Artist", "Sort", "Song", new { sortOrder = "Artist", filter }, null)
        @Html.Raw(songOrder.GetSortGlyph("Artist"))
    }
    else
    {
        <text> Artist </text>
    }
}

@helper Artist(Song song)
{
    if (!string.IsNullOrWhiteSpace(song.Artist))
    {
        @Html.ActionLink(song.Artist, "artist", "song", new { name = song.Artist }, null)
    }
}

@helper TagHeader(SongFilter filter)
{
    <text>Tags</text>
    if (!string.IsNullOrWhiteSpace(filter.Tags))
    {
        var tags = new TagList(filter.Tags);
        var inc = tags.ExtractAdd();
        var exc = tags.ExtractRemove();
        if (!inc.IsEmpty)
        {
            <br /><span> Included:</span>
            foreach (var tag in inc.Tags)
            {
                if (!tag.Contains(':')) { continue; }

                var rg = tag.Split(':');
                var url = "/song/removetags?tags=" + WebUtility.UrlEncode(tag) + "&filter=" + WebUtility.UrlEncode(filter.ToString());
                var img = "/Content/" + TagGroup.ClassToName(rg.Length > 0 ? rg[1] : "tag") + "-50.png";
                <span class="label label-@rg[1].ToLower()" style="margin-right: 5px"><a role="button" class="tag-text" href="@url"><img src="@img" height="12" width="12" />@rg[0] <span class="glyphicon glyphicon-remove-sign"></span></a></span>
            }
        }
        if (!exc.IsEmpty)
        {
            <br /><span>Excluded:</span>
            foreach (var tag in exc.Tags)
            {
                var rg = tag.Split(':');
                var url = "/song/removetags?tags=" + WebUtility.UrlEncode(tag) + "&filter=" + WebUtility.UrlEncode(filter.ToString());
                <span class="label label-@rg[1].ToLower()" style="margin-right: 5px"><a role="button" class="tag-text" href="@url">@rg[0] <span class="glyphicon glyphicon-remove-sign"></span></a></span>
            }
        }
    }
}

@helper Tags(Song song, SongFilter filter)
{
    foreach (var titem in song.TagSummary.Tags.Where(t => !string.Equals(t.TagClass, "dance", StringComparison.OrdinalIgnoreCase)))
    {
        @TagHelpers.TagModalButton(titem, filter, song)
    }
}

@helper TimeHelper(Song song, SongSort order)
{
    var created = order.Id == "Created";
    var prefix = created ? "Created" : "Last modified";
    var time = created ? song.Created : song.Modified;
    var delta = created ? song.CreatedOrderVerbose : song.ModifiedOrderVerbose;
    var timeMessage = prefix + " on " + time.ToString("g") + " (" + delta + " ago)";

    <td class="hidden-xs" data-toggle="tooltip" data-placement="left" title="@timeMessage">
        @(created? song.CreatedOrder : song.ModifiedOrder)
    </td>
}


<script>
    window.VoteOptions = {
        'true': { tip: '@likeTipTrue', img: '' },
        'false': { tip: '@likeTipFalse', img: '-broken' },
        'null': { tip: '@likeTipNull', img: '-outline' }
    };
</script>

<table class="table table-striped table-songs">
    <thead>
    <tr>
        <th style="width:@(danceId==null?"75":"120")px">Like/Play</th>

        @if (isAdmin)
        {
            <th>&nbsp;</th>
            if (canSort)
            {
                <th>&nbsp;</th>
            }
        }
        <th style="min-width:75px" data-toggle="tooltip" data-placement="bottom" data-container="body" title="@("Song Title" + (canSort ? ": Click to sort alphabetically by Title" : string.Empty))">
            @if (canSort)
            {
                @Html.ActionLink("Title", "Sort", "Song", new {sortOrder = "Title", filter}, null)
                @Html.Raw(songOrder.GetSortGlyph("Title"))
            }
            else
            {
                <text>Title</text>
            }
            @if (!hideArtist)
            {
                <span class="visible-xs"> - @ArtistHeader(canSort, songOrder, filter)</span>
            }
        </th>
        @if (!hideArtist)
        {
            <th class="hidden-xs" style="min-width:75px" data-toggle="tooltip" data-placement="bottom" data-container="body" title="@("Artist" + (canSort ? ": Click to sort alphabetically by Artist" : string.Empty))">
                @ArtistHeader(canSort, songOrder, filter)
            </th>
        }
        @if (albumName == null)
        {
                @* TODO: Reinstate album name when we get user selectable columns
                    <th style="min-width:75pt" class="hidden-xs">
                    @if (canSort)
                    {
                        @Html.ActionLink("Album", "Sort", "Song", new { sortOrder = "Album", filter }, null)
                        @Html.Raw(songOrder.GetSortGlyph("Album"))
                    }
                    else
                    {
                        <text>Album</text>
                    }
                </th>*@
        }
        else
        {
            <th style="min-width:75px" class="hidden-xs">
                Track
            </th>
        }
        <th class="hidden-xs" data-toggle="tooltip" data-placement="bottom" data-container="body" title="@("Tempo (in Beats Per Minute)" + (canSort ? ": Click to sort numerically by tempo" : string.Empty))">
            @if (canSort)
            {
                @Html.ActionLink("Tempo (BPM)", "sort", "song", new {sortOrder = "Tempo", filter}, null)
                @Html.Raw(songOrder.GetSortGlyph("Tempo"))
            }
            else
            {
                <text>Tempo (BPM)</text>
            }
        </th>
        @if (showLength)
        {
            <th class="hidden-xs">
                Length
            </th>
        }

        <th style="min-width: 100px" class="hidden-xs">
            @EchoHelper.EchoHeader("Beat",canSort,filter.SongSort,filter)
            @EchoHelper.EchoHeader("Energy", canSort, filter.SongSort, filter)
            @EchoHelper.EchoHeader("Mood", canSort, filter.SongSort, filter)
        </th>
        @if (!hideDances)
        {
            <th style="max-width:200px" data-toggle="tooltip" data-placement="bottom" data-container="body" title="@("Dance Style Tags" + (canSort ? ": Click to sort by most voted on dance style." : string.Empty))">
                @if (canSort && !azureSearch)
                {
                    @Html.ActionLink("Dances", "sort", "song", new {sortOrder = "Dances", filter}, null)
                    @Html.Raw(songOrder.GetSortGlyph("Dances"))
                }
                else
                {
                    <text>Dances</text>
                }
                <span class="visible-xs"> - @TagHeader(filter)</span>
            </th>
        }
        <th style="max-width:200px" class="@(hideDances ? string.Empty : "hidden-xs")">@TagHeader(filter)</th>
        @if (isAdmin)
        {
            <th></th>
        }
        @if (showDate)
        {
            var created = (songOrder.Id == "Created");
            var dateId = created ? "Created" : "Modified";
            <th class="hidden-xs" style="min-width: 50px" data-toggle="tooltip" data-placement="bottom" data-container="body" title="@(dateId + (canSort ? ": Click to sort by date " + dateId : string.Empty))">
                @if (canSort)
                {
                    <a href="@Url.Action("sort", "song", new {sortOrder = dateId, filter})"><span class='glyphicon @(created ? "glyphicon-plus" : "glyphicon-pencil")'></span></a>
                }
                else
                {
                    <span class='glyphicon @(created ? "glyphicon-plus" : "glyphicon-pencil")'></span>
                }
                @Html.Raw(songOrder.GetSortGlyph(dateId))
            </th>
        }
    </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            Song sd = null;
            if (albumName != null)
            {
                sd = item as Song;
            }
            List<DanceRating> scaledDances = null;
            if (item.DanceRatings != null)
            {
                scaledDances = item.DanceRatings.OrderByDescending(dr => danceStats.GetScaledRating(dr.DanceId, dr.Weight)).ToList();
            }
            string tempoString = null;
            if (item.Tempo.HasValue)
            {
                var numerator = 4;
                if (scaledDances != null && scaledDances.Count > 0)
                {
                    var did = scaledDances[0].DanceId;
                    if (!string.IsNullOrWhiteSpace(did))
                    {
                        numerator = Dances.Instance.DanceFromId(did).Meter.Numerator;
                    }
                }
                tempoString = string.Format("<a href='/home/counter?numerator={1}&tempo={0}'>{0}</a>", decimal.Round(item.Tempo.Value), numerator);
            }

            if (item.Title != null)
            {
            <tr>
                <td>
                    @{
                        if (danceId != null)
                        {
                            @SongHelper.LikeHelper(this, item, danceLikes, "dance", "dancing " + danceName + " to this song", danceId, likeTipNull, likeTipTrue, likeTipFalse)
                        }
                        @SongHelper.LikeHelper(this, item, likes, "heart", "this song", "like", likeTipNull, likeTipTrue, likeTipFalse)
                        if (!string.IsNullOrWhiteSpace(item.Purchase))
                        {
                            var id = "Play" + item.SongId;
                            <a href="#" id="@id" role="button" class="btn play-button" style="padding: 0"
                               data-toggle="modal" data-target="#playModal" aria-expanded="false"
                               data-song-id ="@item.SongId"
                               data-title="@item.Title" data-artist="@item.Artist"
                               data-purchase="@item.Purchase" data-sample="@item.Sample"
                               >
                                <img src="@Url.Content("~/Content/playbutton.png")" alt="Play" width="20" height="20"/>
                            </a>
                        }
                    }
                </td>
                @if (isAdmin)
                {
                    var id = "Selected-" + item.SongId;
                    if (canSort)
                    {
                        <td><input name="selectedSongs" id="@id" type="checkbox" value="@item.SongId" /></td>
                    }
                    <td><a href="/song/edit?id=@item.SongId&filter=@filter" role="button" class="btn btn-link btn-sm"><span class="glyphicon glyphicon-pencil"></span></a></td>
                }

                <td>
                    @Html.ActionLink(item.Title, "details", "song", new { id = item.SongId, filter }, null)
                    @if (tempoString != null)
                    {
                        <small class="hidden-sm hidden-md hidden-lg">(@Html.Raw(tempoString) BPM)</small>
                    }
                    <span class="visible-xs"> - @Artist(item)</span>
                </td>

                @if (!hideArtist)
                {
                    <td class="hidden-xs">@Artist(item)</td>
                }

                @if (albumName == null)
                {
                    @*<td class="hidden-xs">
                        @if (!string.IsNullOrWhiteSpace(item.AlbumName))
                        {
                            @Html.ActionLink(item.AlbumName, "album", "song", new { title = item.AlbumName }, null)
                        }
                    </td>*@
                }
                else
                {
                    <td class="hidden-xs">
                        @{
                            var track = sd.TrackFromAlbum(albumName);
                            if (track > 0)
                            {
                                @track.ToString()
                            }
                        }
                    </td>
                }
                <td class="hidden-xs">
                    @if (tempoString != null)
                    {
                        @Html.Raw(tempoString)
                    }
                </td>
                @if (showLength)
                {
                    <td class="hidden-xs">
                        @if (item.Length != null)
                        {
                            @((new SongDuration(item.Length.Value)).ToString())
                        }
                    </td>
                }
                <td class="hidden-xs">
                    @EchoHelper.EchoValues(item)
                </td>
                @if (!hideDances)
                {
                    <td>
                        <span class="visible-xs">
                            @EchoHelper.EchoValues(item)
                        </span>
                        @* ReSharper disable once LoopCanBeConvertedToQuery *@
                        @if (scaledDances != null)
                        {
                            foreach (var ditem in scaledDances)
                            {
                                // TODO: Dance name pulled from the danceMap doesn't require a db lookup - is there a way
                                //  to make the more intuitive ditem.Dance.Name work without a lookup???
                                var badge = danceStats.GetRatingBadge(ditem.DanceId, ditem.Weight);
                                var name = danceStats.FromId(ditem.DanceId).DanceName;
                                var label = name;
                                var tags = string.Empty;
                                if (!string.IsNullOrWhiteSpace(ditem.TagSummary.Summary))
                                {
                                    label = label + " <span class='glyphicon glyphicon-asterisk' aria-hidden='true'></span>";
                                    foreach (var dtitem in ditem.TagSummary.Tags)
                                    {
                                        tags += TagHelpers.TagModalButton(dtitem, filter, item); //"<span class=\"label label-" + dtitem.TagClass.ToLower() + "\">" + dtitem.TagValue + "</span> ";
                                    }
                                }
                                var hasDance = danceQuery.HasDance(ditem.DanceId);
                                var filterT = new SongFilter(filter.ToString());
                                if (hasDance ? (numDances > 1) : (numDances > 0))
                                {
                                    filterT.Action = "advanced";
                                }
                                var urlFiltered = string.Empty;
                                var urlDance = string.Empty;
                                const string baseUrl = "/song/search?dances=";
                                var url = baseUrl + ditem.DanceId;

                                if (!filter.IsRaw)
                                {
                                    url += "&filter=" + new SongFilter { Action = filter.Action, SortOrder = filter.SortOrder };
                                }

                                if (!filter.IsRaw && !filter.IsEmptyPaged && !hasDance)
                                {
                                    var dq = danceQuery.AddDance(ditem.DanceId);
                                    if (isExclusive)
                                    {
                                        urlFiltered = baseUrl + dq.MakeExclusive().Query + "&filter=" + filterT;
                                    }
                                    if (isInclusive)
                                    {
                                        urlDance = baseUrl + dq.MakeInclusive().Query + "&filter=" + filterT;
                                    }
                                }

                                <a href='#' class='rating @badge label label-music' role='button'
                                    data-toggle='modal' data-target='#danceModal' aria-expanded='false'
                                    data-title='@item.Title' data-artist='@item.Artist' data-dance-name='@name'
                                    data-filtered-url="@urlFiltered" data-dance-url='@urlDance' data-url='@url'
                                    data-tags='@MvcHtmlString.Create(tags)'
                                    >@Html.Raw(label)</a>
                            }
                        }
                        <span class="visible-xs">@Tags(item, filter)</span>
                    </td>
                }
                <td class="hidden-xs">@Tags(item, filter)</td>
                @if (hideDances)
                {
                    <td class="visible-xs">
                        @EchoHelper.EchoValues(item)
                        @Tags(item, filter)
                    </td>
                }

                @if (isAdmin)
                {
                    var play = item.Sample != null ? (item.Sample != "." ? "P" : "p") : string.Empty;
                    var echo = item.Danceability != null ? (float.IsNaN(item.Danceability.Value) ? "e" : "E") : string.Empty;
                    <td>@(item.Purchase + play + echo)</td>
                }

                @if (showDate)
                {
                    @TimeHelper(item,songOrder)
                }
            </tr>
            }
        }
    </tbody>
</table>

@Html.Partial("_playmodal")
@Html.Partial("_filtermodal")
@Html.Partial("_dancemodal")
